# ==========================================
# COOLIFY BACKEND ENVIRONMENT VARIABLES
# ==========================================
# Copy these environment variables to your Coolify backend service

# ==========================================
# CORE CONFIGURATION (REQUIRED)
# ==========================================

# Node environment
NODE_ENV=production

# Server configuration
PORT=8000

# ==========================================
# DATABASE CONFIGURATION (REQUIRED)
# ==========================================

# MongoDB connection string
DB_URL=mongodb://mongo:27017/bhavyabazaar

# MongoDB credentials (set secure passwords in Coolify)
MONGO_PASSWORD=secure_mongo_password_here

# ==========================================
# REDIS CONFIGURATION (REQUIRED FOR CACHING)
# ==========================================

# Redis connection URL
REDIS_URL=redis://redis:6379

# Redis password (must match docker-compose.prod.yml)
REDIS_PASSWORD=secure_redis_password

# Redis connection options
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# Redis cluster configuration (for production scaling)
REDIS_CLUSTER_NODES=redis:6379
REDIS_ENABLE_OFFLINE_QUEUE=false
REDIS_MAX_RETRIES_PER_REQUEST=3
REDIS_RETRY_DELAY_ON_FAILURE=100
REDIS_CONNECT_TIMEOUT=10000
REDIS_COMMAND_TIMEOUT=5000

# Cache TTL settings (in seconds)
CACHE_TTL_SHORT=300
CACHE_TTL_MEDIUM=900
CACHE_TTL_LONG=3600
CACHE_TTL_VERY_LONG=86400

# ==========================================
# AUTHENTICATION & SECURITY (REQUIRED)
# ==========================================

# JWT secrets - Generate strong random keys for production
JWT_SECRET_KEY=your_super_secret_jwt_key_min_32_chars_long
JWT_EXPIRES_TIME=7d
ACTIVATION_SECRET=your_activation_secret_key_here

# Cookie settings
COOKIE_EXPIRES_TIME=7

# ==========================================
# CORS CONFIGURATION (REQUIRED)
# ==========================================

# Frontend domains (comma-separated for multiple domains)
CORS_ORIGIN=https://bhavyabazaar.com,https://www.bhavyabazaar.com

# ==========================================
# EMAIL CONFIGURATION (OPTIONAL)
# ==========================================

# SMTP settings for email functionality
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SERVICE=gmail
SMTP_MAIL=your-email@gmail.com
SMTP_PASSWORD=your-email-app-password

# ==========================================
# PAYMENT GATEWAY (OPTIONAL)
# ==========================================

# Stripe configuration
STRIPE_API_KEY=your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key_here

# ==========================================
# FILE UPLOAD CONFIGURATION (OPTIONAL)
# ==========================================

# Upload limits
MAX_FILE_SIZE=10485760
ALLOWED_IMAGE_TYPES=jpg,jpeg,png,gif,webp
ALLOWED_FILE_TYPES=pdf,doc,docx,txt

# ==========================================
# CLOUDINARY CONFIGURATION (OPTIONAL)
# ==========================================

# For cloud image storage
CLOUDINARY_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret

# ==========================================
# REDIS ANALYTICS & MONITORING (OPTIONAL)
# ==========================================

# Enable Redis performance monitoring
REDIS_ENABLE_ANALYTICS=true
REDIS_ENABLE_HEALTH_CHECK=true
REDIS_HEALTH_CHECK_INTERVAL=30000

# Cache warming settings
ENABLE_CACHE_WARMING=true
CACHE_WARM_ON_STARTUP=true

# ==========================================
# PERFORMANCE OPTIMIZATION (OPTIONAL)
# ==========================================

# Compression settings
ENABLE_GZIP_COMPRESSION=true
GZIP_COMPRESSION_THRESHOLD=1024

# Request rate limiting
ENABLE_RATE_LIMITING=true
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# ==========================================
# LOGGING & DEBUGGING (OPTIONAL)
# ==========================================

# Log levels: error, warn, info, debug
LOG_LEVEL=info

# Debug mode (for troubleshooting)
DEBUG=false

# ==========================================
# COOLIFY INSTRUCTIONS
# ==========================================

# 1. In Coolify panel, go to your backend service
# 2. Click on "Environment Variables" 
# 3. Add each variable above (without the # comments)
# 4. Use format: KEY=VALUE
# 5. IMPORTANT: Generate secure passwords for:
#    - MONGO_PASSWORD
#    - REDIS_PASSWORD  
#    - JWT_SECRET_KEY
#    - ACTIVATION_SECRET
# 6. Click "Save" after adding all variables
# 7. Redeploy your backend service

# ==========================================
# EXAMPLE FOR BHAVYABAZAAR.COM DEPLOYMENT
# ==========================================

# Minimal required configuration:
# NODE_ENV=production
# PORT=8000
# DB_URL=mongodb://mongo:27017/bhavyabazaar
# REDIS_URL=redis://redis:6379
# JWT_SECRET_KEY=your_generated_32_character_secret_key
# ACTIVATION_SECRET=your_generated_activation_secret
# CORS_ORIGIN=https://bhavyabazaar.com,https://www.bhavyabazaar.com

# ==========================================
# DOCKER COMPOSE INTEGRATION
# ==========================================
# These variables work with your existing docker-compose.prod.yml:
# - MONGO_PASSWORD is used by MongoDB service
# - REDIS_PASSWORD is used by Redis service
# - All internal service names (mongo, redis) are already configured

# ==========================================
# VALIDATION COMMANDS (After Deployment)
# ==========================================

# Test Redis connection:
# curl https://api.bhavyabazaar.com/api/v2/cache/health

# Test cache performance:
# curl -X POST https://api.bhavyabazaar.com/api/v2/cache/benchmark

# Check cache statistics:
# curl https://api.bhavyabazaar.com/api/v2/cache/stats

# Test API health:
# curl https://api.bhavyabazaar.com/api/v2/health

# ==========================================
# TROUBLESHOOTING
# ==========================================

# If Redis connection fails:
# 1. Check REDIS_URL format is correct
# 2. Verify REDIS_PASSWORD matches docker-compose.prod.yml
# 3. Ensure Redis service is running in Coolify
# 4. Check network connectivity between services

# If MongoDB connection fails:
# 1. Verify DB_URL points to correct service
# 2. Check MONGO_PASSWORD is set in both services
# 3. Ensure MongoDB service is healthy

# If CORS errors occur:
# 1. Verify CORS_ORIGIN includes your frontend domains
# 2. Check protocol (https vs http)
# 3. Ensure no trailing slashes in domains
