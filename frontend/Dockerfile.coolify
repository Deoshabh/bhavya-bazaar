# Dockerfile for Coolify deployment
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Configure npm for better network handling and module resolution
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 3 && \
    npm config set registry https://registry.npmjs.org/

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies with explicit polyfill packages
RUN npm install --production=false --no-audit --prefer-offline && \
    npm install process crypto-browserify stream-browserify buffer --save-dev

# Copy all source files
COPY . .

# Set environment variables for build
ENV NODE_ENV=production
ENV CI=false
ENV GENERATE_SOURCEMAP=false

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy docker entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create nginx directories with proper permissions
RUN mkdir -p /var/log/nginx /var/cache/nginx /var/run/nginx && \
    chmod -R 755 /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Expose port
EXPOSE 80

# Labels for better container management
LABEL maintainer="Bhavya Bazaar Team" \
      version="1.0" \
      description="Bhavya Bazaar Frontend - Coolify Deployment"

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
