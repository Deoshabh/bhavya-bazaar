# Coolify-Optimized Docker Compose for Bhavya Bazaar with Redis
# This configuration is specifically optimized for Coolify deployment

version: '3.8'

services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: bhavya-bazaar-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: bhavyabazaar
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - bhavya-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: bhavya-bazaar-redis
    restart: unless-stopped
    command: >
      sh -c '
      if [ -n "${REDIS_PASSWORD}" ]; then
        redis-server 
        --requirepass "${REDIS_PASSWORD}"
        --appendonly yes
        --appendfsync everysec
        --auto-aof-rewrite-percentage 100
        --auto-aof-rewrite-min-size 64mb
        --maxmemory 256mb
        --maxmemory-policy allkeys-lru
        --timeout 300
        --tcp-keepalive 60
        --databases 16
      else
        redis-server 
        --appendonly yes
        --appendfsync everysec
        --auto-aof-rewrite-percentage 100
        --auto-aof-rewrite-min-size 64mb
        --maxmemory 256mb
        --maxmemory-policy allkeys-lru
        --timeout 300
        --tcp-keepalive 60
        --databases 16
      fi
      '
    volumes:
      - redis_data:/data
    networks:
      - bhavya-network
    healthcheck:
      test: >
        sh -c '
        if [ -n "${REDIS_PASSWORD}" ]; then
          redis-cli -a "${REDIS_PASSWORD}" ping
        else
          redis-cli ping
        fi
        '
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    sysctls:
      net.core.somaxconn: 1024
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: bhavya-bazaar-backend
    restart: unless-stopped
    environment:
      # Application Config
      NODE_ENV: production
      PORT: 8000
      
      # Database Config
      DB_URL: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD}@mongo:27017/bhavyabazaar?authSource=admin
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_DB: 0
      REDIS_CONNECTION_TIMEOUT: 5000
      REDIS_COMMAND_TIMEOUT: 3000
      REDIS_MAX_RETRIES: 3
      REDIS_RETRY_DELAY: 100
      REDIS_MAX_CONNECTIONS: 50
      REDIS_MIN_CONNECTIONS: 5
      
      # Cache Configuration
      CACHE_ENABLED: true
      CACHE_DEFAULT_TTL: 300
      CACHE_COMPRESSION_ENABLED: true
      CACHE_COMPRESSION_THRESHOLD: 1024
      CACHE_ANALYTICS_ENABLED: true
      
      # Session Management
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_TTL: 1800
      
      # Authentication
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ACTIVATION_SECRET: ${ACTIVATION_SECRET}
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Email Configuration (if applicable)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      
      # Payment Gateway (if applicable)
      STRIPE_API_KEY: ${STRIPE_API_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend/uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - bhavya-network
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/cache/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (Optional - if you want to serve frontend through Docker)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: bhavya-bazaar-frontend
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-http://localhost:8000}
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:80"
    networks:
      - bhavya-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  bhavya-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

# Coolify Labels for automatic discovery and management
labels:
  - "coolify.managed=true"
  - "coolify.name=bhavya-bazaar"
  - "coolify.type=application"
  - "coolify.version=1.0.0"
